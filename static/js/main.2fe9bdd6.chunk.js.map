{"version":3,"sources":["components/CityForecast/CityForecast.js","components/CitySelector/CitySelector.js","App.js","serviceWorker.js","index.js"],"names":["CityForecast","fetch","this","props","city","lat","lon","headers","Headers","then","resp","json","res","console","log","getForecast","className","name","country","Component","CitySelector","state","searchField","cities","selectedCity","showCities","featureMember","response","GeoObjectCollection","setState","filter","GeoObject","metaDataProperty","GeocoderMetaData","kind","map","Point","pos","split","AddressDetails","Country","CountryName","str","clearTimeout","window","counter","setTimeout","getCities","id","label","onChange","e","searchInput","target","value","idx","key","onClick","selectCity","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUA4CeA,G,kMApCXC,MAAM,yDACMC,KAAKC,MAAMC,KAAKC,IAC1B,QAAUH,KAAKC,MAAMC,KAAKE,IAC3B,CACCC,QAAU,IAAIC,QAAQ,CACpB,mBAXQ,2CAcTC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,Q,0CAKhBC,QAAQC,IAAI,MACZZ,KAAKa,gB,+BAIL,OACE,yBAAKC,UAAU,gBACb,6BAAOd,KAAKC,MAAMC,KAAKa,MACvB,6BAAOf,KAAKC,MAAMC,KAAKc,SACvB,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,mC,GAlCmBC,cCkGZC,E,2MA/FbC,MAAQ,CACNC,YAAa,GACbC,OAAQ,GACRC,aAAc,CACZN,QAAS,yDACTb,IAAK,YACLC,IAAK,YACLW,KAAM,wCAERQ,YAAY,G,2EAGA,IAAD,OACXxB,MAAM,uGAEFC,KAAKmB,MAAMC,YAAc,cAE5Bb,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,YAA+D,IAAzBiB,EAAwB,EAA3DC,SAAYC,oBAAuBF,cAC1C,EAAKG,SAAS,CACZN,OAAQG,EAKLI,QAAO,YACN,MAAkD,aADH,EAAtCC,UAAaC,iBACEC,iBAAiBC,QAE1CC,KAAI,YACuE,IAAD,IAAzEJ,UAAaK,EAA4D,EAA5DA,MAA2BH,EAAiC,EAArDD,iBAAoBC,iBAAoBhB,EAAa,EAAbA,KAC5D,MAAO,CACLX,IAAK8B,EAAMC,IAAIC,MAAM,KAAK,GAC1BjC,IAAK+B,EAAMC,IAAIC,MAAM,KAAK,GAC1BrB,OACAC,QAASe,EAAiBM,eAAeC,QAAQC,kBAIzD5B,QAAQC,IAAI,EAAKO,MAAME,a,iCAKfC,GACVtB,KAAK2B,SAAS,CACZL,eACAD,OAAQ,O,kCAICmB,GAAM,IAAD,OAMhB,GALAC,aAAaC,OAAOC,SACpB3C,KAAK2B,SAAS,CACZP,YAAaoB,EACblB,aAAc,OAEJ,KAARkB,EACF,OAAOxC,KAAK2B,SAAS,CAAEN,OAAQ,KAEjCqB,OAAOC,QAAUC,YAAW,kBAAM,EAAKC,cAAa,O,+BAG5C,IAAD,OACP,OACE,yBAAK/B,UAAU,gBACb,6BACE,yBAAKA,UAAU,uBACb,2BACEA,UAAU,sBACVgC,GAAG,wBACHC,MAAM,+EACNC,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOC,UAE3C,yBAAKtC,UAAU,qBACZd,KAAKmB,MAAME,OAAOY,KAAI,SAAC/B,EAAMmD,GAC5B,OACE,yBAAKC,IAAKD,EAAKE,QAAS,kBAAM,EAAKC,WAAWtD,KAC5C,6BAAOA,EAAKa,MACZ,6BAAOb,EAAKc,cAMS,OAA5BhB,KAAKmB,MAAMG,aACV,kBAAC,EAAD,CAAcpB,KAAMF,KAAKmB,MAAMG,eAC/B,U,GAvFaL,aCSZwC,MARf,WACE,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,QCEc4C,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7D,MAAK,SAAA8D,GACjCA,EAAaC,kB","file":"static/js/main.2fe9bdd6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './CityForecast.css';\nconst API_KEY = '1b8e7243-8941-47da-aab6-e07097769c7a';\n\nclass CityForecast extends Component {\n\n  getForecast () {\n    // fetch('https://api.weather.yandex.ru/v1/forecast?lang=ru&lat=43.238293&lon=76.945465'\n    fetch('https://api.weather.yandex.ru/v1/forecast?lang=ru' \n    + '&lat=' + this.props.city.lat \n    + '&lon=' + this.props.city.lon\n    ,{\n      headers: (new Headers({\n        'X-Yandex-API-Key': API_KEY\n      }))\n    })\n      .then(resp => resp.json())\n      .then(res => {\n        console.log(res)\n      });\n  }\n\n  componentDidMount () {\n    console.log(3232)\n    this.getForecast()\n  }\n\n  render() {\n    return (\n      <div className=\"CityForecast\">\n        <div>{ this.props.city.name }</div>\n        <div>{ this.props.city.country }</div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    );\n  }\n}\n\nexport default CityForecast;\n","import React, { Component } from 'react';\nimport './CitySelector.css';\nimport CityForecast from '../CityForecast/CityForecast';\n\nconst API_KEY = 'ff4781d8-005f-4319-9140-9fac60c1f425';\n\nclass CitySelector extends Component {\n  state = {\n    searchField: '',\n    cities: [],\n    selectedCity: {\n      country: \"Казахстан\",\n      lat: \"43.238293\",\n      lon: \"76.945465\",\n      name: \"Алматы\",\n    },\n    showCities: true,\n  }\n\n  getCities () { // from Yandex Geocoder API\n    fetch('https://geocode-maps.yandex.ru/1.x/?apikey=' \n      + API_KEY + '&format=json&geocode='\n      + this.state.searchField + '&results=5'\n    )\n    .then(resp => resp.json())\n    .then(({ response: { GeoObjectCollection: { featureMember } } }) => {\n      this.setState({ \n        cities: featureMember\n          /**\n           * Yandex Geocoder API не позволяет искать только городам\n           * поэтому здесь нужна фильтрация (locality - нас. пункт)\n           */\n          .filter(({ GeoObject: { metaDataProperty } }) => {\n            return metaDataProperty.GeocoderMetaData.kind === 'locality'\n          })\n          .map(({ \n            GeoObject: { Point, metaDataProperty: { GeocoderMetaData }, name } }) => {\n            return {\n              lon: Point.pos.split(' ')[0],\n              lat: Point.pos.split(' ')[1],\n              name,\n              country: GeocoderMetaData.AddressDetails.Country.CountryName\n            };\n          }),\n        });\n      console.log(this.state.cities);\n    });\n  }\n\n  \n  selectCity (selectedCity) { \n    this.setState({ \n      selectedCity,\n      cities: [],\n    });\n  }\n\n  searchInput (str) {\n    clearTimeout(window.counter);\n    this.setState({ \n      searchField: str,\n      selectedCity: null,\n    });\n    if (str === '') {\n      return this.setState({ cities: [] })\n    }\n    window.counter = setTimeout(() => this.getCities(), 1000);\n  }\n\n  render() {\n    return (\n      <div className=\"CitySelector\">\n        <div>\n          <div className=\"CitySelector-search\">\n            <input\n              className=\"CitySelector-search\"\n              id=\"standard-uncontrolled\"\n              label=\"Выбрать город...\"\n              onChange={e => this.searchInput(e.target.value)} \n            />\n            <div className=\"CitySelector-list\">\n              {this.state.cities.map((city, idx) => {\n                return (\n                  <div key={idx} onClick={() => this.selectCity(city)}>\n                    <div>{ city.name }</div>\n                    <div>{ city.country }</div>\n                  </div>\n                )\n              })}\n            </div>\n\n            {this.state.selectedCity !== null ?\n              <CityForecast city={this.state.selectedCity} />\n            : ''}\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CitySelector;\n","import React from 'react';\nimport './App.css';\n\n// import SomeComponent from './components/SomeComponent/SomeComponent';\nimport CitySelector from './components/CitySelector/CitySelector';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CitySelector />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}