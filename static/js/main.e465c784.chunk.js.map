{"version":3,"sources":["utils/units&types.js","components/CityForecast/CityForecast.js","components/CitySelector/CitySelector.js","App.js","serviceWorker.js","index.js"],"names":["weatherTypes","clouds","clear","rain","weekDays","mon","tue","wed","thu","fri","sat","sun","weekDaysShort","months","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","kelvinToCelsius","k","toFixed","CityForecast","state","weather","selectedDayIdx","fetch","this","props","city","lat","lon","then","resp","json","list","setState","map","temp","dt","humidity","pressure","main","unites_types","toLowerCase","date","weekDayShort","String","Date","split","weekDay","month","day","night","getForecast","className","name","country","onClick","onClose","idx","key","selectDayIdx","Component","CitySelector","searchField","cities","selectedCity","featureMember","response","GeoObjectCollection","filter","GeoObject","metaDataProperty","GeocoderMetaData","kind","Point","pos","AddressDetails","Country","CountryName","console","log","str","clearTimeout","window","counter","setTimeout","getCities","placeholder","id","label","onChange","e","searchInput","target","value","selectCity","closeCity","bind","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAAe,G,YAAA,CACbA,aAAc,CACZC,OAAQ,6CACRC,MAAO,2BACPC,KAAM,kCAERC,SAAU,CACRC,IAAK,qEACLC,IAAK,6CACLC,IAAK,iCACLC,IAAK,mDACLC,IAAK,6CACLC,IAAK,6CACLC,IAAK,sEAEPC,cAAe,CACbP,IAAK,eACLC,IAAK,eACLC,IAAK,eACLC,IAAK,eACLC,IAAK,eACLC,IAAK,eACLC,IAAK,gBAEPE,OAAQ,CACNC,IAAK,uCACLC,IAAK,6CACLC,IAAK,2BACLC,IAAK,uCACLC,IAAK,qBACLC,IAAK,2BACLC,IAAK,2BACLC,IAAK,uCACLC,IAAK,mDACLC,IAAK,6CACLC,IAAK,uCACLC,IAAK,gDC/BHC,EAAkB,SAAAC,GAAC,OAAgB,GAAVA,EAAI,IAAU,GAAGC,UAAY,UAoF7CC,E,2MAjFbC,MAAQ,CACNC,QAAS,GACTC,eAAgB,G,6EAGF,IAAD,OACbC,MAAM,8DACQC,KAAKC,MAAMC,KAAKC,IAC1B,QAAUH,KAAKC,MAAMC,KAAKE,IAC1B,8DAGDC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,YAAe,IAAZG,EAAW,EAAXA,KACP,EAAKC,SAAS,CACZZ,QAASW,EAAKE,KAAI,YAAgD,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,SAAUhB,EAAwB,EAAxBA,QACvC,MAAO,CACLgB,WACAC,SAH6D,EAAfA,SAI9CC,KAAMC,EAAalD,aAAa+B,EAAQ,GAAGkB,KAAKE,eAChDC,KAAM,CACJC,aAAcH,EAAatC,cAAc0C,OAAO,IAAIC,KAAU,IAALT,IAAYU,MAAM,KAAK,GAAGL,eACnFM,QAASP,EAAa9C,SAASkD,OAAO,IAAIC,KAAU,IAALT,IAAYU,MAAM,KAAK,GAAGL,eACzEO,MAAOR,EAAarC,OAAOyC,OAAO,IAAIC,KAAU,IAALT,IAAYU,MAAM,KAAK,GAAGL,eACrEQ,IAAKL,OAAO,IAAIC,KAAU,IAALT,IAAYU,MAAM,KAAK,IAE9CX,KAAM,CACJc,IAAKjC,EAAgBmB,EAAKc,KAC1BC,MAAOlC,EAAgBmB,EAAKe,mB,0CAUxC1B,KAAK2B,gB,mCAGO7B,GACZE,KAAKS,SAAS,CAAEX,qB,+BAGR,IAAD,OACP,OACE,yBAAK8B,UAAU,gBACb,6BAAO5B,KAAKC,MAAMC,KAAK2B,MACvB,6BAAO7B,KAAKC,MAAMC,KAAK4B,SACvB,4BAAQC,QAAS,kBAAM,EAAK9B,MAAM+B,YAAlC,KACChC,KAAKJ,MAAMC,QAAQa,KAAI,SAACe,EAAKQ,GAC5B,OACE,EAAKrC,MAAME,gBAAkBmC,EAC3B,yBAAKC,IAAKD,GACR,0DAAYR,EAAIP,KAAKK,QAArB,IAA+BE,EAAIP,KAAKO,IAAxC,IAA8CA,EAAIP,KAAKM,OACvD,uEAAeC,EAAIV,MACnB,0DAAYU,EAAId,KAAKc,KACrB,gEAAaA,EAAId,KAAKc,KACtB,wFAAiBA,EAAIZ,UACrB,kFAAgBY,EAAIX,UACpB,8BAEF,MAILd,KAAKJ,MAAMC,QAAQa,KAAI,SAACe,EAAKQ,GAC5B,OACE,4BACEF,QAAS,kBAAM,EAAKI,aAAaF,IACjCC,IAAKD,EACLL,UAAW,EAAKhC,MAAME,gBAAkBmC,EAAM,8BAAgC,IAC9ER,EAAIP,KAAKC,sB,GA1EIiB,aC8GZC,E,2MA9GbzC,MAAQ,CACN0C,YAAa,GACbC,OAAQ,GAORC,aAAc,M,2EAGF,IAAD,OACXzC,MAAM,uGAEFC,KAAKJ,MAAM0C,YAAc,eAE5BjC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,YAA+D,IAAzBoC,EAAwB,EAA3DC,SAAYC,oBAAuBF,cAC1C,EAAKhC,SAAS,CACZ8B,OAAQE,EAKLG,QAAO,YACN,MAAkD,aADH,EAAtCC,UAAaC,iBACEC,iBAAiBC,QAE1CtC,KAAI,YACuE,IAAD,IAAzEmC,UAAaI,EAA4D,EAA5DA,MAA2BF,EAAiC,EAArDD,iBAAoBC,iBAAoBlB,EAAa,EAAbA,KAC5D,MAAO,CACLzB,IAAK6C,EAAMC,IAAI5B,MAAM,KAAK,GAC1BnB,IAAK8C,EAAMC,IAAI5B,MAAM,KAAK,GAC1BO,OACAC,QAASiB,EAAiBI,eAAeC,QAAQC,kBAIzDC,QAAQC,IAAI,EAAK3D,MAAM2C,a,iCAKfC,GACVxC,KAAKS,SAAS,CACZ+B,eACAD,OAAQ,O,kCAKVvC,KAAKS,SAAS,CACZ+B,aAAc,S,kCAILgB,GAAM,IAAD,OAMhB,GALAC,aAAaC,OAAOC,SACpB3D,KAAKS,SAAS,CACZ6B,YAAakB,EACbhB,aAAc,OAEJ,KAARgB,EACF,OAAOxD,KAAKS,SAAS,CAAE8B,OAAQ,KAEjCmB,OAAOC,QAAUC,YAAW,kBAAM,EAAKC,cAAa,O,+BAG5C,IAAD,OACP,OACE,yBAAKjC,UAAU,gBACb,6BACE,yBAAKA,UAAU,uBAEe,MAA3B5B,KAAKJ,MAAM4C,aACV,6BACE,yBAAKZ,UAAU,0BACb,2BACEkC,YAAY,kJACZlC,UAAU,qBACVmC,GAAG,wBACHC,MAAM,+EACNC,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOC,WAG7C,yBAAKzC,UAAU,qBACZ5B,KAAKJ,MAAM2C,OAAO7B,KAAI,SAACR,EAAM+B,GAC5B,OACE,yBACEL,UAAU,wBACVM,IAAKD,EACLF,QAAS,kBAAM,EAAKuC,WAAWpE,KAE/B,6BAAMA,EAAK2B,KAAX,KAAmB3B,EAAK4B,eAOlC,kBAAC,EAAD,CAAcE,QAAShC,KAAKuE,UAAUC,KAAKxE,MAAOE,KAAMF,KAAKJ,MAAM4C,sB,GArGtDJ,aCSZqC,MARf,WACE,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,QCEc8C,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/E,MAAK,SAAAgF,GACjCA,EAAaC,kB","file":"static/js/main.e465c784.chunk.js","sourcesContent":["export default {\n  weatherTypes: {\n    clouds: 'Облачно',\n    clear: 'Ясно',\n    rain: 'Дождь',\n  },\n  weekDays: {\n    mon: 'Понедельник',\n    tue: 'Вторник',\n    wed: 'Среда',\n    thu: 'Чертверг',\n    fri: 'Пятница',\n    sat: 'Суббота',\n    sun: 'Воскресенье',\n  },\n  weekDaysShort: {\n    mon: 'ПН',\n    tue: 'ВТ',\n    wed: 'СР',\n    thu: 'ЧТ',\n    fri: 'ПТ',\n    sat: 'СБ',\n    sun: 'ВС',\n  },\n  months: {\n    jan: 'Январь',\n    feb: 'Февраль',\n    mar: 'Март',\n    apr: 'Апрель',\n    may: 'Май',\n    jun: 'Июнь',\n    jul: 'Июль',\n    aug: 'Август',\n    sep: 'Сентябрь',\n    oct: 'Октябрь',\n    nov: 'Ноябрь',\n    dec: 'Декабрь',\n  }\n}\n","import React, { Component } from 'react';\nimport './CityForecast.css';\nimport unites_types from '../../utils/units&types';\n\nconst API_KEY = '28d61ce481690736b87603364680739c';\nconst kelvinToCelsius = k => ((k - 32) * 5 / 9).toFixed() + ' °C';\n\nclass CityForecast extends Component {\n  state = {\n    weather: [],\n    selectedDayIdx: 0,\n  }\n\n  getForecast () {\n    fetch('http://api.openweathermap.org/data/2.5/forecast/daily?' \n      + '&lat=' + this.props.city.lat \n      + '&lon=' + this.props.city.lon\n      + '&units=metric'\n      + '&cnt=7&appid=' + API_KEY\n    )\n      .then(resp => resp.json())\n      .then(({ list }) => {\n        this.setState({\n          weather: list.map(({ temp, dt, humidity, weather, pressure }) => {\n            return {\n              humidity,\n              pressure,\n              main: unites_types.weatherTypes[weather[0].main.toLowerCase()],\n              date: {\n                weekDayShort: unites_types.weekDaysShort[String(new Date(dt * 1000)).split(' ')[0].toLowerCase()],\n                weekDay: unites_types.weekDays[String(new Date(dt * 1000)).split(' ')[0].toLowerCase()],\n                month: unites_types.months[String(new Date(dt * 1000)).split(' ')[1].toLowerCase()],\n                day: String(new Date(dt * 1000)).split(' ')[2],\n              },\n              temp: {\n                day: kelvinToCelsius(temp.day),\n                night: kelvinToCelsius(temp.night),\n              },\n            };\n          }),\n        });\n      });\n  }\n  \n\n  componentDidMount () {\n    this.getForecast()\n  }\n\n  selectDayIdx (selectedDayIdx) {\n    this.setState({ selectedDayIdx });\n  }\n\n  render() {\n    return (\n      <div className=\"CityForecast\">\n        <div>{ this.props.city.name }</div>\n        <div>{ this.props.city.country }</div>\n        <button onClick={() => this.props.onClose()}>X</button>\n        {this.state.weather.map((day, idx) => {\n          return (\n            this.state.selectedDayIdx == idx ? \n              <div key={idx}>\n                <div>День: {day.date.weekDay} {day.date.day} {day.date.month}</div>\n                <div>В общем: {day.main}</div>\n                <div>Днем: {day.temp.day}</div>\n                <div>Ночью: {day.temp.day}</div>\n                <div>Влажность: {day.humidity}</div>\n                <div>Давление: {day.pressure}</div>\n                <br/>\n              </div>\n            : ''\n          )\n        })}\n\n        {this.state.weather.map((day, idx) => {\n          return (\n            <button \n              onClick={() => this.selectDayIdx(idx)}\n              key={idx}\n              className={this.state.selectedDayIdx == idx ? 'CityForecast-button--active' : ''}\n            >{day.date.weekDayShort}</button>\n          )\n        })}\n      </div>\n    );\n  }\n}\n\nexport default CityForecast;\n","import React, { Component } from 'react';\nimport './CitySelector.css';\nimport CityForecast from '../CityForecast/CityForecast';\n\nconst API_KEY = 'ff4781d8-005f-4319-9140-9fac60c1f425';\n\nclass CitySelector extends Component {\n  state = {\n    searchField: '',\n    cities: [],\n    // selectedCity: {\n    //   country: \"Казахстан\",\n    //   lat: \"43.238293\",\n    //   lon: \"76.945465\",\n    //   name: \"Алматы\",\n    // },\n    selectedCity: null,\n  }\n\n  getCities () { // from Yandex Geocoder API\n    fetch('https://geocode-maps.yandex.ru/1.x/?apikey=' \n      + API_KEY + '&format=json&geocode='\n      + this.state.searchField + '&results=50'\n    )\n    .then(resp => resp.json())\n    .then(({ response: { GeoObjectCollection: { featureMember } } }) => {\n      this.setState({ \n        cities: featureMember\n          /**\n           * Yandex Geocoder API не позволяет искать только городам\n           * поэтому здесь нужна фильтрация (locality - нас. пункт)\n           */\n          .filter(({ GeoObject: { metaDataProperty } }) => {\n            return metaDataProperty.GeocoderMetaData.kind === 'locality'\n          })\n          .map(({ \n            GeoObject: { Point, metaDataProperty: { GeocoderMetaData }, name } }) => {\n            return {\n              lon: Point.pos.split(' ')[0],\n              lat: Point.pos.split(' ')[1],\n              name,\n              country: GeocoderMetaData.AddressDetails.Country.CountryName\n            };\n          }),\n        });\n      console.log(this.state.cities);\n    });\n  }\n\n  \n  selectCity (selectedCity) { \n    this.setState({ \n      selectedCity,\n      cities: [],\n    });\n  }\n\n  closeCity () {\n    this.setState({\n      selectedCity: null,\n    });\n  }\n\n  searchInput (str) {\n    clearTimeout(window.counter);\n    this.setState({ \n      searchField: str,\n      selectedCity: null,\n    });\n    if (str === '') {\n      return this.setState({ cities: [] })\n    }\n    window.counter = setTimeout(() => this.getCities(), 1000);\n  }\n\n  render() {\n    return (\n      <div className=\"CitySelector\">\n        <div>\n          <div className=\"CitySelector-search\">\n            \n            {this.state.selectedCity == null ?\n              <div>\n                <div className=\"CitySelector-inputWrap\">\n                  <input\n                    placeholder=\"Выберите населенный пункт...\"\n                    className=\"CitySelector-input\"\n                    id=\"standard-uncontrolled\"\n                    label=\"Выбрать город...\"\n                    onChange={e => this.searchInput(e.target.value)}\n                  />\n                </div>\n                <div className=\"CitySelector-list\">\n                  {this.state.cities.map((city, idx) => {\n                    return (\n                      <div \n                        className=\"CitySelector-listItem\"\n                        key={idx} \n                        onClick={() => this.selectCity(city)}\n                      >\n                        <div>{city.name}, {city.country}</div>\n                      </div>\n                    )\n                  })}\n                </div>\n              </div>\n            : \n              <CityForecast onClose={this.closeCity.bind(this)} city={this.state.selectedCity} />\n            }\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CitySelector;\n","import React from 'react';\nimport './App.css';\n\n// import SomeComponent from './components/SomeComponent/SomeComponent';\nimport CitySelector from './components/CitySelector/CitySelector';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CitySelector />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}